/**
 * Copyright (c) {YEAR}
 * 
 * Represents a MySql Controller to handle requests interacting with a MySQL Db
 * 
 * @summary MySqlController
 * @author {AUTHOR}
 * 
 * Created at       : {CREATED}
 * Last modified    : {MODIFIED}
 */
import express from 'express';
import MySqlRepo from '../data/mysql.repo';{logger-impl}

class MySqlController {
    private mySql: MySqlRepo = new MySqlRepo();

    constructor() {}

    public test = async(req: express.Request, res: express.Response) => {
        const testStatus = await this.mySql.testConnection();
        
        const status = testStatus === true ? 200 : 500;

        res.status(status).json(testStatus);
    }

    public add = async(req: express.Request, res: express.Response) => {
        const rows = await this.mySql.add(req.body);
        
        const status = rows !== null ? 201 : 500;

        res.status(status).json(rows);
    }

    public get = async(req: express.Request, res: express.Response) => {
        const id = req.params.id;
        const datas = await this.mySql.get(id);
        const status = datas !== null ? 200 : 500;

        res.status(status).json(datas);
    }

    public getAll = async(req: express.Request, res: express.Response) => {
        {logger}(`request from: ${req.ip}`);
        const datas = await this.mySql.getAll();
        const status = datas !== null ? 200 : 500;
        
        res.status(status).json(datas);
    }

    public update = async(req: express.Request, res: express.Response) => {
        const rows = await this.mySql.update(req.body);
        
        const status = rows !== null ? 200 : 500;

        res.status(status).json(rows);
    }

    public delete = async(req: express.Request, res: express.Response) => {
        const id = req.params.id;
        const rows = await this.mySql.delete(id);        
        const status = rows !== null ? 200 : 500;

        res.status(status).json(rows);
    }
}

export default MySqlController;
