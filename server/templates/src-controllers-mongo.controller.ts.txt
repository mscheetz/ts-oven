/**
 * Copyright (c) {YEAR}
 * 
 * Represents a Mongo Controller to handle requests interacting with a MongoDb
 * 
 * @summary MongoController
 * @author {AUTHOR}
 * 
 * Created at       : {CREATED}
 * Last modified    : {MODIFIED}
 */
/// <reference path="../interfaces/account.interface.ts"/>
import express from 'express';
import MongoRepo from '../data/mongo.repo';{logger-impl}

class MongoController {
    private repo: MongoRepo;

    constructor() { 
        this.repo = new MongoRepo();
    }

    public add = async(req: express.Request, res: express.Response) => {
        const account = req.body;

        let insertStatus = false;
        try {
            const result = await this.repo.add(account);
            insertStatus = true;
        } catch(err) {
            {logger-error}(err);
            insertStatus = false;
        }
        const status = insertStatus ? 201 : 500;

        res.status(status).json(insertStatus);
    }
    
    public get = async(req: express.Request, res: express.Response) => {
        const id = req.params.id;
        const datas = await this.repo.get(+id);

        res.status(200).json(datas);
    }
    
    public getAll = async(req: express.Request, res: express.Response) => {
        {logger}(`request from: ${req.ip}`);
        
        const datas = await this.repo.getAll();

        res.status(200).json(datas);
    }

    public update = async(req: express.Request, res: express.Response) => {
        const account = req.body;

        const datas = await this.repo.update(account);

        res.status(200).json(datas);
    }

    public delete = async(req: express.Request, res: express.Response) => {
        const id = req.params.id;

        const datas = await this.repo.delete(+id);

        res.status(200).json(datas);
    }
}

export default MongoController;
